generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId      String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  avatar      String?
  friends     UserFriends[] @relation("UserToFriends")
  friendOf    UserFriends[] @relation("FriendToUser")
  ChatUsers   ChatUser[]    // Correct relation for users in multiple chats
}

model UserFriends {
  userId    String @id
  friendId  String
  user      User   @relation("UserToFriends", fields: [userId], references: [userId])
  friend    User   @relation("FriendToUser", fields: [friendId], references: [userId])

  @@unique([userId, friendId])
}

model Chat {
  chatId    String      @id @default(uuid())
  name      String
  avatar    String?
  chatUsers ChatUser[]
  messages  ChatMessage[]
}

model ChatMessage {
  chatMessageId String    @id @default(uuid())
  message       String
  chatUser      ChatUser? @relation(fields: [chatUserId], references: [chatUserId])  // A message belongs to one ChatUser
  chatUserId    String?
  chat          Chat?      @relation(fields: [chatId], references: [chatId])  // A message belongs to one Chat
  chatId        String?
}

model ChatUser {
  chatUserId    String     @id @default(uuid())
  chat          Chat       @relation(fields: [chatId], references: [chatId])  // A user belongs to one Chat
  chatId        String
  user          User       @relation(fields: [userId], references: [userId])  // A user belongs to one User
  userId        String
  isViewed      Boolean
  chatMessages  ChatMessage[]
}
